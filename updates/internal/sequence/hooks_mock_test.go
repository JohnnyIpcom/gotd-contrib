// Code generated by MockGen. DO NOT EDIT.
// Source: hooks.go

// Package sequence is a generated GoMock package.
package sequence

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockedHooks is a mock of hooks interface.
type MockedHooks struct {
	ctrl     *gomock.Controller
	recorder *MockedHooksMockRecorder
}

// MockedHooksMockRecorder is the mock recorder for MockedHooks.
type MockedHooksMockRecorder struct {
	mock *MockedHooks
}

// NewMockedHooks creates a new mock instance.
func NewMockedHooks(ctrl *gomock.Controller) *MockedHooks {
	mock := &MockedHooks{ctrl: ctrl}
	mock.recorder = &MockedHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockedHooks) EXPECT() *MockedHooksMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockedHooks) Apply(state int, updates []interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Apply", state, updates)
}

// Apply indicates an expected call of Apply.
func (mr *MockedHooksMockRecorder) Apply(state, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockedHooks)(nil).Apply), state, updates)
}

// FastgapBegin mocks base method.
func (m *MockedHooks) FastgapBegin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FastgapBegin")
}

// FastgapBegin indicates an expected call of FastgapBegin.
func (mr *MockedHooksMockRecorder) FastgapBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastgapBegin", reflect.TypeOf((*MockedHooks)(nil).FastgapBegin))
}

// FastgapCollectorFinished mocks base method.
func (m *MockedHooks) FastgapCollectorFinished() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FastgapCollectorFinished")
}

// FastgapCollectorFinished indicates an expected call of FastgapCollectorFinished.
func (mr *MockedHooksMockRecorder) FastgapCollectorFinished() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastgapCollectorFinished", reflect.TypeOf((*MockedHooks)(nil).FastgapCollectorFinished))
}

// FastgapEnd mocks base method.
func (m *MockedHooks) FastgapEnd() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FastgapEnd")
}

// FastgapEnd indicates an expected call of FastgapEnd.
func (mr *MockedHooksMockRecorder) FastgapEnd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastgapEnd", reflect.TypeOf((*MockedHooks)(nil).FastgapEnd))
}

// Transition mocks base method.
func (m *MockedHooks) Transition(from, to mode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Transition", from, to)
}

// Transition indicates an expected call of Transition.
func (mr *MockedHooksMockRecorder) Transition(from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transition", reflect.TypeOf((*MockedHooks)(nil).Transition), from, to)
}
