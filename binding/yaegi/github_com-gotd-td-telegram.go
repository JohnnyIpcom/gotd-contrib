// Code generated by 'yaegi extract github.com/gotd/td/telegram'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/gotd/td/bin"
	"github.com/gotd/td/telegram"
	"github.com/gotd/td/tg"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/gotd/td/telegram/telegram"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"AddrProduction":         reflect.ValueOf(constant.MakeFromLiteral("\"149.154.167.50:443\"", token.STRING, 0)),
		"AddrTest":               reflect.ValueOf(constant.MakeFromLiteral("\"149.154.167.40:443\"", token.STRING, 0)),
		"AsFloodWait":            reflect.ValueOf(&telegram.AsFloodWait).Elem(),
		"BotFromEnvironment":     reflect.ValueOf(telegram.BotFromEnvironment),
		"ClientFromEnvironment":  reflect.ValueOf(telegram.ClientFromEnvironment),
		"ErrFloodWait":           reflect.ValueOf(constant.MakeFromLiteral("\"FLOOD_WAIT\"", token.STRING, 0)),
		"NewClient":              reflect.ValueOf(telegram.NewClient),
		"OptionsFromEnvironment": reflect.ValueOf(telegram.OptionsFromEnvironment),
		"Port":                   reflect.ValueOf(constant.MakeFromLiteral("443", token.INT, 0)),
		"RunUntilCanceled":       reflect.ValueOf(telegram.RunUntilCanceled),
		"TestAppHash":            reflect.ValueOf(constant.MakeFromLiteral("\"344583e45741c457fe1862106095a5eb\"", token.STRING, 0)),
		"TestAppID":              reflect.ValueOf(constant.MakeFromLiteral("17349", token.INT, 0)),
		"TestClient":             reflect.ValueOf(telegram.TestClient),

		// type definitions
		"Client":             reflect.ValueOf((*telegram.Client)(nil)),
		"CloseInvoker":       reflect.ValueOf((*telegram.CloseInvoker)(nil)),
		"DeviceConfig":       reflect.ValueOf((*telegram.DeviceConfig)(nil)),
		"Error":              reflect.ValueOf((*telegram.Error)(nil)),
		"FileSessionStorage": reflect.ValueOf((*telegram.FileSessionStorage)(nil)),
		"InvokeFunc":         reflect.ValueOf((*telegram.InvokeFunc)(nil)),
		"Middleware":         reflect.ValueOf((*telegram.Middleware)(nil)),
		"MiddlewareFunc":     reflect.ValueOf((*telegram.MiddlewareFunc)(nil)),
		"Options":            reflect.ValueOf((*telegram.Options)(nil)),
		"SessionStorage":     reflect.ValueOf((*telegram.SessionStorage)(nil)),
		"UpdateHandler":      reflect.ValueOf((*telegram.UpdateHandler)(nil)),
		"UpdateHandlerFunc":  reflect.ValueOf((*telegram.UpdateHandlerFunc)(nil)),

		// interface wrapper definitions
		"_CloseInvoker":   reflect.ValueOf((*_github_com_gotd_td_telegram_CloseInvoker)(nil)),
		"_Middleware":     reflect.ValueOf((*_github_com_gotd_td_telegram_Middleware)(nil)),
		"_SessionStorage": reflect.ValueOf((*_github_com_gotd_td_telegram_SessionStorage)(nil)),
		"_UpdateHandler":  reflect.ValueOf((*_github_com_gotd_td_telegram_UpdateHandler)(nil)),
	}
}

// _github_com_gotd_td_telegram_CloseInvoker is an interface wrapper for CloseInvoker type
type _github_com_gotd_td_telegram_CloseInvoker struct {
	WClose  func() error
	WInvoke func(ctx context.Context, input bin.Encoder, output bin.Decoder) error
}

func (W _github_com_gotd_td_telegram_CloseInvoker) Close() error { return W.WClose() }
func (W _github_com_gotd_td_telegram_CloseInvoker) Invoke(ctx context.Context, input bin.Encoder, output bin.Decoder) error {
	return W.WInvoke(ctx, input, output)
}

// _github_com_gotd_td_telegram_Middleware is an interface wrapper for Middleware type
type _github_com_gotd_td_telegram_Middleware struct {
	WHandle func(next tg.Invoker) telegram.InvokeFunc
}

func (W _github_com_gotd_td_telegram_Middleware) Handle(next tg.Invoker) telegram.InvokeFunc {
	return W.WHandle(next)
}

// _github_com_gotd_td_telegram_SessionStorage is an interface wrapper for SessionStorage type
type _github_com_gotd_td_telegram_SessionStorage struct {
	WLoadSession  func(ctx context.Context) ([]byte, error)
	WStoreSession func(ctx context.Context, data []byte) error
}

func (W _github_com_gotd_td_telegram_SessionStorage) LoadSession(ctx context.Context) ([]byte, error) {
	return W.WLoadSession(ctx)
}
func (W _github_com_gotd_td_telegram_SessionStorage) StoreSession(ctx context.Context, data []byte) error {
	return W.WStoreSession(ctx, data)
}

// _github_com_gotd_td_telegram_UpdateHandler is an interface wrapper for UpdateHandler type
type _github_com_gotd_td_telegram_UpdateHandler struct {
	WHandle func(ctx context.Context, u tg.UpdatesClass) error
}

func (W _github_com_gotd_td_telegram_UpdateHandler) Handle(ctx context.Context, u tg.UpdatesClass) error {
	return W.WHandle(ctx, u)
}
