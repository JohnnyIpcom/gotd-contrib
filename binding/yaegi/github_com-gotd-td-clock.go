// Code generated by 'yaegi extract github.com/gotd/td/clock'. DO NOT EDIT.

package yaegi

import (
	"github.com/gotd/td/clock"
	"reflect"
	"time"
)

func init() {
	Symbols["github.com/gotd/td/clock"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"System": reflect.ValueOf(&clock.System).Elem(),

		// type definitions
		"Clock": reflect.ValueOf((*clock.Clock)(nil)),

		// interface wrapper definitions
		"_Clock": reflect.ValueOf((*_github_com_gotd_td_clock_Clock)(nil)),
	}
}

// _github_com_gotd_td_clock_Clock is an interface wrapper for Clock type
type _github_com_gotd_td_clock_Clock struct {
	WAfter func(d time.Duration) <-chan time.Time
	WNow   func() time.Time
}

func (W _github_com_gotd_td_clock_Clock) After(d time.Duration) <-chan time.Time { return W.WAfter(d) }
func (W _github_com_gotd_td_clock_Clock) Now() time.Time                         { return W.WNow() }
