// Code generated by 'yaegi extract github.com/gotd/td/transport'. DO NOT EDIT.

package yaegi

import (
	"context"
	"github.com/gotd/td/bin"
	"github.com/gotd/td/transport"
	"io"
	"net"
	"reflect"
)

func init() {
	Symbols["github.com/gotd/td/transport"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abridged":              reflect.ValueOf(transport.Abridged),
		"Full":                  reflect.ValueOf(transport.Full),
		"Intermediate":          reflect.ValueOf(transport.Intermediate),
		"MTProxy":               reflect.ValueOf(transport.MTProxy),
		"NewCustomServer":       reflect.ValueOf(transport.NewCustomServer),
		"NewFullServer":         reflect.ValueOf(transport.NewFullServer),
		"NewIntermediateServer": reflect.ValueOf(transport.NewIntermediateServer),
		"NewTransport":          reflect.ValueOf(transport.NewTransport),
		"PaddedIntermediate":    reflect.ValueOf(transport.PaddedIntermediate),

		// type definitions
		"Codec":     reflect.ValueOf((*transport.Codec)(nil)),
		"Conn":      reflect.ValueOf((*transport.Conn)(nil)),
		"DialFunc":  reflect.ValueOf((*transport.DialFunc)(nil)),
		"Dialer":    reflect.ValueOf((*transport.Dialer)(nil)),
		"Handler":   reflect.ValueOf((*transport.Handler)(nil)),
		"Server":    reflect.ValueOf((*transport.Server)(nil)),
		"Transport": reflect.ValueOf((*transport.Transport)(nil)),

		// interface wrapper definitions
		"_Codec":  reflect.ValueOf((*_github_com_gotd_td_transport_Codec)(nil)),
		"_Conn":   reflect.ValueOf((*_github_com_gotd_td_transport_Conn)(nil)),
		"_Dialer": reflect.ValueOf((*_github_com_gotd_td_transport_Dialer)(nil)),
	}
}

// _github_com_gotd_td_transport_Codec is an interface wrapper for Codec type
type _github_com_gotd_td_transport_Codec struct {
	WRead        func(r io.Reader, b *bin.Buffer) error
	WReadHeader  func(r io.Reader) error
	WWrite       func(w io.Writer, b *bin.Buffer) error
	WWriteHeader func(w io.Writer) error
}

func (W _github_com_gotd_td_transport_Codec) Read(r io.Reader, b *bin.Buffer) error {
	return W.WRead(r, b)
}
func (W _github_com_gotd_td_transport_Codec) ReadHeader(r io.Reader) error { return W.WReadHeader(r) }
func (W _github_com_gotd_td_transport_Codec) Write(w io.Writer, b *bin.Buffer) error {
	return W.WWrite(w, b)
}
func (W _github_com_gotd_td_transport_Codec) WriteHeader(w io.Writer) error { return W.WWriteHeader(w) }

// _github_com_gotd_td_transport_Conn is an interface wrapper for Conn type
type _github_com_gotd_td_transport_Conn struct {
	WClose func() error
	WRecv  func(ctx context.Context, b *bin.Buffer) error
	WSend  func(ctx context.Context, b *bin.Buffer) error
}

func (W _github_com_gotd_td_transport_Conn) Close() error { return W.WClose() }
func (W _github_com_gotd_td_transport_Conn) Recv(ctx context.Context, b *bin.Buffer) error {
	return W.WRecv(ctx, b)
}
func (W _github_com_gotd_td_transport_Conn) Send(ctx context.Context, b *bin.Buffer) error {
	return W.WSend(ctx, b)
}

// _github_com_gotd_td_transport_Dialer is an interface wrapper for Dialer type
type _github_com_gotd_td_transport_Dialer struct {
	WDialContext func(ctx context.Context, network string, address string) (net.Conn, error)
}

func (W _github_com_gotd_td_transport_Dialer) DialContext(ctx context.Context, network string, address string) (net.Conn, error) {
	return W.WDialContext(ctx, network, address)
}
